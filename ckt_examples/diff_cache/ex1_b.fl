//==========================================================================
//
// Data-independent completion signal design example
//
//==========================================================================

load "ste.fl";

TYPE "word" 16;

let safe_collatz = 
    bit_input clk.
    bit_input start.
    word_input t0.
    bit_output done.
    word_output out.
    word_internal length.
    word_internal t.
    word_internal counter.
    bit_internal eq1.
    bit_internal is_even is_odd.
    CELL "draw_hier data_independent" [
	eq1 <- (t '=' '1), 
	is_even <- ((t '%' '2) '=' '0), 
	is_odd <- '~' is_even,
	STATE clk t [
	    start	      --- t0,
	    (t '=' '1)	      --- t,
	    (t '%' '2 '=' '1) --- ('3 '*' t '+' '1),
	    (t '%' '2 '=' '0) --- (t '/' '2)
	],
	STATE clk counter [
	    start	      --- '156,
	    (counter '!=' '0)  --- counter '-' '1
	],
	STATE clk length [
	    start	--- '0,
	    (t '!=' '1)	--- (length '+' '1)
	],
	done <- counter '=' '0,
	re_ff_en clk eq1 length out
];

let test_harness =
    bit_input	clk.
    bit_input	start.
    word_input	t0.
    word_input	max_cnt.
    word_output	timer.
    bit_output	in_range.
    //
    bit_internal done.
    word_internal out.
    CELL "test_harness" [
	safe_collatz clk start t0 done out,
	STATE clk timer [
	    start     --- '0,
	    '~' done  --- (timer '+' '1)
	],
	in_range <- (out '<=' max_cnt)
];

let ckt = pexlif2fsm (test_harness 'clk 'start 't0 'max_cnt 'timer 'in_range);
let vis = STE_debug ckt;
vis;



let N = 200;

// Try some scalar inputs
let ant = "clk" is_clock N
	and
	  "t0[15:0]" is "26" for 1 cycle
	and
	  "start" is "0x1" for 1 cycle followed_by "0" for (N-2) cycles
	and
	  "max_cnt[15:0]" is "100" for N cycles
;
STE "-e" vis [] ant [] [];


let ant = "clk" is_clock N
	and
	  "t0[15:0]" is "173" for 1 cycle
	and
	  "start" is "0x1" for 1 cycle followed_by "0" for (N-2) cycles
	and
	  "max_cnt[15:0]" is "100" for N cycles
;
STE "-e" vis [] ant [] [];

// Now try symbolic inputs constrained to lie between 1 and 1000
let A = bv_constrained_variable "r_a[15:0]"
			(\v. (v > (int2bv 0)) AND (v < (int2bv 1000)))
;

let spec = bv_constrained_variable "spec[15:0]" (\v. (v > (int2bv 190)));

let ant = "clk" is_clock N
	and
	  "t0[15:0]" is A for 1 cycle
	and
	  "start" is "0x1" for 1 cycle followed_by "0" for (N-2) cycles
	and
	  "max_cnt[15:0]" is spec for N cycles
;

let cons = "in_range" is "0x1" in_cycle (N-1);

update_vossrc "DYNAMIC-ORDERING" "NO";
STE "-e" vis [] ant cons [];

